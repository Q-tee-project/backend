sequenceDiagram
    participant User as 사용자
    participant NextJS as Next.js Frontend
    participant FastAPI as FastAPI Math Service
    participant Redis as Redis Message Broker
    participant Celery as Celery Worker
    participant PG as PostgreSQL
    participant Gemini as Gemini 2.5 Pro
    participant GPT as GPT-4o-mini AI Judge

    User->>NextJS: 1. 문제 생성 요청<br/>학년, 단원, 개수, 난이도
    NextJS->>FastAPI: 2. POST /api/worksheets/generate
    FastAPI->>Redis: 3. Celery 태스크 등록<br/>generate_math_problems_task.delay
    FastAPI-->>NextJS: task_id 즉시 반환 비동기 처리
    NextJS-->>User: 생성 중 상태 표시

    Redis->>Celery: 4. 태스크 큐에서 작업 가져오기
    Celery->>Celery: 5. 교육과정 데이터 로드<br/>middle1_math_curriculum.json
    Celery->>Celery: 6. 프롬프트 생성<br/>난이도 A/B/C, 문제 유형

    loop 최대 3회 재시도
        Celery->>Gemini: 7. 문제 생성 요청<br/>프롬프트 + 교육과정 정보
        Gemini-->>Celery: JSON 응답<br/>문제, 정답, 풀이, TikZ 코드

        loop 각 문제마다
            Celery->>GPT: 8. 문제 검증 요청<br/>수학정확성, 정답일치, 완결성, 논리성
            GPT-->>Celery: 9. 검증 결과<br/>VALID/INVALID + 피드백
        end

        alt 모든 문제 합격
            Note over Celery: 검증 완료
        else 일부 문제 불합격
            Note over Celery: 피드백 포함 재생성<br/>부족한 개수만큼
        end
    end

    Celery->>PG: 10. Worksheet + Problems 저장<br/>TikZ 코드 포함
    PG-->>Celery: worksheet_id 반환
    Celery->>Redis: 11. 태스크 상태 업데이트<br/>SUCCESS + worksheet_id

    NextJS->>FastAPI: 12. GET /api/worksheets/task/task_id<br/>폴링 또는 WebSocket
    FastAPI->>Redis: 태스크 상태 확인
    Redis-->>FastAPI: SUCCESS + worksheet_id
    FastAPI-->>NextJS: 완료 응답

    NextJS->>FastAPI: 13. GET /api/worksheets/worksheet_id
    FastAPI->>PG: Worksheet + Problems 조회
    PG-->>FastAPI: 문제 데이터 JSON
    FastAPI-->>NextJS: 문제 목록 응답
    NextJS-->>User: 생성된 문제 화면에 표시<br/>TikZ 그래프 렌더링
