"""Add teacher_id and approved_at columns to grading_sessions

Revision ID: 697de91c2aac
Revises: 
Create Date: 2025-09-22 05:41:55.115623

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '697de91c2aac'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('generations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('generation_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('school_level', sa.String(), nullable=False),
    sa.Column('grade', sa.Integer(), nullable=False),
    sa.Column('korean_type', sa.String(), nullable=False),
    sa.Column('question_type', sa.String(), nullable=False),
    sa.Column('difficulty', sa.String(), nullable=False),
    sa.Column('problem_count', sa.Integer(), nullable=False),
    sa.Column('question_type_ratio', sa.JSON(), nullable=True),
    sa.Column('difficulty_ratio', sa.JSON(), nullable=True),
    sa.Column('user_text', sa.Text(), nullable=True),
    sa.Column('total_generated', sa.Integer(), nullable=True),
    sa.Column('actual_korean_type_distribution', sa.JSON(), nullable=True),
    sa.Column('actual_question_type_distribution', sa.JSON(), nullable=True),
    sa.Column('actual_difficulty_distribution', sa.JSON(), nullable=True),
    sa.Column('celery_task_id', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_generations_generation_id'), 'generations', ['generation_id'], unique=True, schema='korean_service')
    op.create_index(op.f('ix_korean_service_generations_id'), 'generations', ['id'], unique=False, schema='korean_service')
    op.create_table('grading_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('worksheet_id', sa.Integer(), nullable=False),
    sa.Column('graded_by', sa.Integer(), nullable=False),
    sa.Column('total_problems', sa.Integer(), nullable=False),
    sa.Column('correct_count', sa.Integer(), nullable=True),
    sa.Column('total_score', sa.Float(), nullable=True),
    sa.Column('max_possible_score', sa.Float(), nullable=False),
    sa.Column('points_per_problem', sa.Float(), nullable=False),
    sa.Column('input_method', sa.String(), nullable=False),
    sa.Column('ocr_text', sa.Text(), nullable=True),
    sa.Column('ocr_results', sa.JSON(), nullable=True),
    sa.Column('multiple_choice_answers', sa.JSON(), nullable=True),
    sa.Column('celery_task_id', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('teacher_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('graded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_grading_sessions_id'), 'grading_sessions', ['id'], unique=False, schema='korean_service')
    op.create_table('korean_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('worksheet_id', sa.Integer(), nullable=False),
    sa.Column('classroom_id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('korean_type', sa.String(), nullable=False),
    sa.Column('question_type', sa.String(), nullable=False),
    sa.Column('problem_count', sa.Integer(), nullable=False),
    sa.Column('is_deployed', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_korean_assignments_id'), 'korean_assignments', ['id'], unique=False, schema='korean_service')
    op.create_table('worksheets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('school_level', sa.String(), nullable=False),
    sa.Column('grade', sa.Integer(), nullable=False),
    sa.Column('korean_type', sa.String(), nullable=False),
    sa.Column('question_type', sa.String(), nullable=False),
    sa.Column('difficulty', sa.String(), nullable=False),
    sa.Column('problem_count', sa.Integer(), nullable=False),
    sa.Column('question_type_ratio', sa.JSON(), nullable=True),
    sa.Column('difficulty_ratio', sa.JSON(), nullable=True),
    sa.Column('user_text', sa.Text(), nullable=True),
    sa.Column('generation_id', sa.String(), nullable=False),
    sa.Column('actual_korean_type_distribution', sa.JSON(), nullable=True),
    sa.Column('actual_question_type_distribution', sa.JSON(), nullable=True),
    sa.Column('actual_difficulty_distribution', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PROCESSING', 'COMPLETED', 'FAILED', 'PUBLISHED', name='worksheetstatus'), nullable=True),
    sa.Column('celery_task_id', sa.String(), nullable=True),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_worksheets_celery_task_id'), 'worksheets', ['celery_task_id'], unique=False, schema='korean_service')
    op.create_index(op.f('ix_korean_service_worksheets_generation_id'), 'worksheets', ['generation_id'], unique=True, schema='korean_service')
    op.create_index(op.f('ix_korean_service_worksheets_id'), 'worksheets', ['id'], unique=False, schema='korean_service')
    op.create_table('korean_assignment_deployments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('classroom_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('deployed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('graded_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assignment_id'], ['korean_service.korean_assignments.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_korean_assignment_deployments_id'), 'korean_assignment_deployments', ['id'], unique=False, schema='korean_service')
    op.create_table('problem_grading_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('grading_session_id', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Integer(), nullable=False),
    sa.Column('user_answer', sa.Text(), nullable=True),
    sa.Column('actual_user_answer', sa.Text(), nullable=True),
    sa.Column('correct_answer', sa.Text(), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('points_per_problem', sa.Float(), nullable=False),
    sa.Column('problem_type', sa.String(), nullable=False),
    sa.Column('input_method', sa.String(), nullable=False),
    sa.Column('ai_score', sa.Float(), nullable=True),
    sa.Column('ai_feedback', sa.Text(), nullable=True),
    sa.Column('strengths', sa.Text(), nullable=True),
    sa.Column('improvements', sa.Text(), nullable=True),
    sa.Column('keyword_score_ratio', sa.Float(), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['grading_session_id'], ['korean_service.grading_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_problem_grading_results_id'), 'problem_grading_results', ['id'], unique=False, schema='korean_service')
    op.create_table('problems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('worksheet_id', sa.Integer(), nullable=False),
    sa.Column('sequence_order', sa.Integer(), nullable=False),
    sa.Column('korean_type', sa.Enum('POEM', 'NOVEL', 'NON_FICTION', 'GRAMMAR', name='koreantype'), nullable=False),
    sa.Column('problem_type', sa.Enum('MULTIPLE_CHOICE', 'ESSAY', 'SHORT_ANSWER', name='problemtype'), nullable=False),
    sa.Column('difficulty', sa.Enum('HIGH', 'MEDIUM', 'LOW', name='difficulty'), nullable=False),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('choices', sa.JSON(), nullable=True),
    sa.Column('correct_answer', sa.Text(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=False),
    sa.Column('source_text', sa.Text(), nullable=True),
    sa.Column('source_title', sa.String(), nullable=True),
    sa.Column('source_author', sa.String(), nullable=True),
    sa.Column('ai_model_used', sa.String(), nullable=True),
    sa.Column('generation_prompt', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['worksheet_id'], ['korean_service.worksheets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='korean_service'
    )
    op.create_index(op.f('ix_korean_service_problems_id'), 'problems', ['id'], unique=False, schema='korean_service')
    op.drop_index('ix_student_join_requests_id', table_name='student_join_requests')
    op.drop_table('student_join_requests')
    op.drop_index('ix_korean_generations_generation_id', table_name='korean_generations')
    op.drop_index('ix_korean_generations_id', table_name='korean_generations')
    op.drop_table('korean_generations')
    op.drop_index('ix_korean_student_join_requests_id', table_name='korean_student_join_requests')
    op.drop_table('korean_student_join_requests')
    op.drop_index('ix_teachers_email', table_name='teachers')
    op.drop_index('ix_teachers_id', table_name='teachers')
    op.drop_index('ix_teachers_username', table_name='teachers')
    op.drop_table('teachers')
    op.drop_index('ix_korean_assignments_id', table_name='korean_assignments')
    op.drop_table('korean_assignments')
    op.drop_index('ix_korean_teachers_email', table_name='korean_teachers')
    op.drop_index('ix_korean_teachers_id', table_name='korean_teachers')
    op.drop_index('ix_korean_teachers_username', table_name='korean_teachers')
    op.drop_table('korean_teachers')
    op.drop_index('ix_students_email', table_name='students')
    op.drop_index('ix_students_id', table_name='students')
    op.drop_index('ix_students_username', table_name='students')
    op.drop_table('students')
    op.drop_index('ix_korean_grading_sessions_id', table_name='korean_grading_sessions')
    op.drop_table('korean_grading_sessions')
    op.drop_index('ix_korean_problems_id', table_name='korean_problems')
    op.drop_table('korean_problems')
    op.drop_index('ix_korean_worksheets_celery_task_id', table_name='korean_worksheets')
    op.drop_index('ix_korean_worksheets_generation_id', table_name='korean_worksheets')
    op.drop_index('ix_korean_worksheets_id', table_name='korean_worksheets')
    op.drop_table('korean_worksheets')
    op.drop_index('ix_korean_problem_grading_results_id', table_name='korean_problem_grading_results')
    op.drop_table('korean_problem_grading_results')
    op.drop_index('ix_korean_assignment_deployments_id', table_name='korean_assignment_deployments')
    op.drop_table('korean_assignment_deployments')
    op.drop_index('ix_classrooms_class_code', table_name='classrooms')
    op.drop_index('ix_classrooms_id', table_name='classrooms')
    op.drop_table('classrooms')
    op.drop_index('ix_korean_students_email', table_name='korean_students')
    op.drop_index('ix_korean_students_id', table_name='korean_students')
    op.drop_index('ix_korean_students_username', table_name='korean_students')
    op.drop_table('korean_students')
    op.drop_index('ix_korean_classrooms_class_code', table_name='korean_classrooms')
    op.drop_index('ix_korean_classrooms_id', table_name='korean_classrooms')
    op.drop_table('korean_classrooms')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('korean_classrooms',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('school_level', postgresql.ENUM('MIDDLE', 'HIGH', name='schoollevel'), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('class_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['korean_teachers.id'], name='korean_classrooms_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='korean_classrooms_pkey')
    )
    op.create_index('ix_korean_classrooms_id', 'korean_classrooms', ['id'], unique=False)
    op.create_index('ix_korean_classrooms_class_code', 'korean_classrooms', ['class_code'], unique=True)
    op.create_table('korean_students',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('school_level', postgresql.ENUM('MIDDLE', 'HIGH', name='schoollevel'), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_students_pkey')
    )
    op.create_index('ix_korean_students_username', 'korean_students', ['username'], unique=True)
    op.create_index('ix_korean_students_id', 'korean_students', ['id'], unique=False)
    op.create_index('ix_korean_students_email', 'korean_students', ['email'], unique=True)
    op.create_table('classrooms',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('classrooms_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('school_level', postgresql.ENUM('MIDDLE', 'HIGH', name='schoollevel'), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('class_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], name='classrooms_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='classrooms_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_classrooms_id', 'classrooms', ['id'], unique=False)
    op.create_index('ix_classrooms_class_code', 'classrooms', ['class_code'], unique=True)
    op.create_table('korean_assignment_deployments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('assignment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('classroom_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('deployed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('graded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_assignment_deployments_pkey')
    )
    op.create_index('ix_korean_assignment_deployments_id', 'korean_assignment_deployments', ['id'], unique=False)
    op.create_table('korean_problem_grading_results',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('grading_session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('problem_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('actual_user_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_correct', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('points_per_problem', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('problem_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('input_method', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ai_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('strengths', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('improvements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('keyword_score_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['grading_session_id'], ['korean_grading_sessions.id'], name='korean_problem_grading_results_grading_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='korean_problem_grading_results_pkey')
    )
    op.create_index('ix_korean_problem_grading_results_id', 'korean_problem_grading_results', ['id'], unique=False)
    op.create_table('korean_worksheets',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('korean_worksheets_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('school_level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('semester', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('korean_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('problem_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('korean_type_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('question_type_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('difficulty_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generation_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('actual_korean_type_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actual_question_type_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actual_difficulty_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PROCESSING', 'COMPLETED', 'FAILED', 'PUBLISHED', name='worksheetstatus'), autoincrement=False, nullable=True),
    sa.Column('celery_task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_worksheets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_korean_worksheets_id', 'korean_worksheets', ['id'], unique=False)
    op.create_index('ix_korean_worksheets_generation_id', 'korean_worksheets', ['generation_id'], unique=True)
    op.create_index('ix_korean_worksheets_celery_task_id', 'korean_worksheets', ['celery_task_id'], unique=False)
    op.create_table('korean_problems',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('worksheet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sequence_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('korean_type', postgresql.ENUM('POEM', 'NOVEL', 'NON_FICTION', 'GRAMMAR', name='koreantype'), autoincrement=False, nullable=False),
    sa.Column('problem_type', postgresql.ENUM('MULTIPLE_CHOICE', 'ESSAY', 'SHORT_ANSWER', name='problemtype'), autoincrement=False, nullable=False),
    sa.Column('difficulty', postgresql.ENUM('HIGH', 'MEDIUM', 'LOW', name='difficulty'), autoincrement=False, nullable=False),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('choices', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('source_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source_author', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ai_model_used', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('generation_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['worksheet_id'], ['korean_worksheets.id'], name='korean_problems_worksheet_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='korean_problems_pkey')
    )
    op.create_index('ix_korean_problems_id', 'korean_problems', ['id'], unique=False)
    op.create_table('korean_grading_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('worksheet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('graded_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_problems', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('correct_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_possible_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('points_per_problem', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('input_method', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ocr_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ocr_results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('multiple_choice_answers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('celery_task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('graded_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_grading_sessions_pkey')
    )
    op.create_index('ix_korean_grading_sessions_id', 'korean_grading_sessions', ['id'], unique=False)
    op.create_table('students',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('students_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('school_level', postgresql.ENUM('MIDDLE', 'HIGH', name='schoollevel'), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='students_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_students_username', 'students', ['username'], unique=True)
    op.create_index('ix_students_id', 'students', ['id'], unique=False)
    op.create_index('ix_students_email', 'students', ['email'], unique=True)
    op.create_table('korean_teachers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_teachers_pkey')
    )
    op.create_index('ix_korean_teachers_username', 'korean_teachers', ['username'], unique=True)
    op.create_index('ix_korean_teachers_id', 'korean_teachers', ['id'], unique=False)
    op.create_index('ix_korean_teachers_email', 'korean_teachers', ['email'], unique=True)
    op.create_table('korean_assignments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('worksheet_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('classroom_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('korean_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('problem_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_deployed', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_assignments_pkey')
    )
    op.create_index('ix_korean_assignments_id', 'korean_assignments', ['id'], unique=False)
    op.create_table('teachers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('teachers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='teachers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_teachers_username', 'teachers', ['username'], unique=True)
    op.create_index('ix_teachers_id', 'teachers', ['id'], unique=False)
    op.create_index('ix_teachers_email', 'teachers', ['email'], unique=True)
    op.create_table('korean_student_join_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('classroom_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_student_join_requests_pkey')
    )
    op.create_index('ix_korean_student_join_requests_id', 'korean_student_join_requests', ['id'], unique=False)
    op.create_table('korean_generations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('generation_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('school_level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('grade', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('semester', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('korean_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('problem_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('korean_type_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('question_type_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('difficulty_ratio', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_generated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_korean_type_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actual_question_type_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actual_difficulty_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('celery_task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='korean_generations_pkey')
    )
    op.create_index('ix_korean_generations_id', 'korean_generations', ['id'], unique=False)
    op.create_index('ix_korean_generations_generation_id', 'korean_generations', ['generation_id'], unique=True)
    op.create_table('student_join_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('classroom_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['classroom_id'], ['classrooms.id'], name='student_join_requests_classroom_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], name='student_join_requests_student_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='student_join_requests_pkey')
    )
    op.create_index('ix_student_join_requests_id', 'student_join_requests', ['id'], unique=False)
    op.drop_index(op.f('ix_korean_service_problems_id'), table_name='problems', schema='korean_service')
    op.drop_table('problems', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_problem_grading_results_id'), table_name='problem_grading_results', schema='korean_service')
    op.drop_table('problem_grading_results', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_korean_assignment_deployments_id'), table_name='korean_assignment_deployments', schema='korean_service')
    op.drop_table('korean_assignment_deployments', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_worksheets_id'), table_name='worksheets', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_worksheets_generation_id'), table_name='worksheets', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_worksheets_celery_task_id'), table_name='worksheets', schema='korean_service')
    op.drop_table('worksheets', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_korean_assignments_id'), table_name='korean_assignments', schema='korean_service')
    op.drop_table('korean_assignments', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_grading_sessions_id'), table_name='grading_sessions', schema='korean_service')
    op.drop_table('grading_sessions', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_generations_id'), table_name='generations', schema='korean_service')
    op.drop_index(op.f('ix_korean_service_generations_generation_id'), table_name='generations', schema='korean_service')
    op.drop_table('generations', schema='korean_service')
    # ### end Alembic commands ###